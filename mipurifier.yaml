esphome:
  name: airfan1
  comment: for Xiaomi Mi Fresh Air Ventilator MJXFJ-300-G1 dmaker.airfresh.t2017 (and similar models using the same protocol)
  friendly_name: AirFan1
  includes:
    - mipurifier.h


esp32:
  board: esp32dev
  framework:
    type: esp-idf
# Required configuration for the weird single core ESP-WROOM-32D module
#    sdkconfig_options:
#      CONFIG_FREERTOS_UNICORE: y
    advanced:
      ignore_efuse_mac_crc: true

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: ""

ota:
  - platform: esphome
    password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Airfan1 Fallback Hotspot"
    password: ""

captive_portal:

# Initialize the serial connection to the STM32 microcontroller
uart:
  id: uart_bus
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 115200

# Initialize our custom component
custom_component:
  - lambda: |-
      auto mipurifier = new MiPurifier(id(uart_bus));
      App.register_component(mipurifier);
      return {mipurifier};
    components:
      - id: mipurifier

# Main switch for turning on/off the unit
switch:
  - platform: template
    name: "Power"
    id: power_switch
    icon: mdi:power
    turn_on_action:
      - lambda:
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->turn_on();
    turn_off_action:
      - lambda:
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->turn_off();
  - platform: template
    name: "Beeper"
    id: beeper_switch
    icon: mdi:volume-high
    entity_category: config
    turn_on_action:
      - lambda:
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->enable_beeper();
    turn_off_action:
      - lambda:
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->disable_beeper();
  - platform: template
    name: "Heat On"
    id: ptc_switch
    icon: mdi:radiator
    entity_category: config
    turn_on_action:
      - lambda:
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->ptc_on();
    turn_off_action:
      - lambda:
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->ptc_off();
  - platform: template
    name: "Display"
    id: display_switch
    icon: mdi:lightbulb
    entity_category: config
    turn_on_action:
      - lambda:
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->display_on();
    turn_off_action:
      - lambda:
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->display_off();
  - platform: template
    name: "Child_lock"
    id: child_lock_switch
    icon: mdi:lock
    entity_category: config
    turn_on_action:
      - lambda:
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->child_lock_on();
    turn_off_action:
      - lambda:
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->child_lock_off();

button:
  - platform: template
    name: "Reset Filter efficient"
    id: reset_efficient
    icon: mdi:air-filter
    entity_category: config
    on_press:
      - lambda:
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->reset_upper_filter();
  - platform: template
    name: "Reset Filter intermediate"
    id: reset_intermediate
    icon: mdi:air-filter
    entity_category: config
    on_press:
      - lambda:
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->reset_dust_filter();

# Select components for mode & ptc_level
select:
  - platform: template
    name: "Mode"
    id: mode_select
    entity_category: config
    options:
      - "auto"
      - "sleep"
      - "favourite"
    set_action:
      - lambda: |-
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->set_mode(x);
  - platform: template
    name: "Heat_level"
    id: ptc_level_select
    icon: mdi:radiator
    entity_category: config
    options:
      - "low"
      - "medium"
      - "high"
    set_action:
      - lambda: |-
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->set_ptc_level(x);
  - platform: template
    name: "Display orientation"
    id: screen_direction_select
    icon: mdi:tablet
    entity_category: config
    options:
      - "forward"
      - "left"
      - "right"
    set_action:
      - lambda: |-
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->set_screen_direction(x);


# down MIIO_net_change cloud  ?

#  time "2024-06-28 12:56:36\r" 

# Number to control the speed in manual mode
number:
  - platform: template
    name: "Favourite Speed"
#    unit_of_measurement: "m3/h"       closed to see automation history Logbook
#    device_class: volume_flow_rate    closed to see automation history Logbook
    id: favouritespeed
    icon: mdi:weather-windy
    min_value: 60
    max_value: 300
    step: 10
    set_action:
      - lambda: |-
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->set_favouritespeed((int)x);

# Expose measured environmental values, and remaining filter life
sensor:
  - platform: custom
    lambda: |-
      auto c = static_cast<MiPurifier *>(mipurifier);
      return {
        c->airquality_sensor,
        c->carbon_dioxide_sensor,
        c->temperature_sensor,
        c->filter_intermediate_sensor,
        c->filter_efficient_sensor,
        c->filter_inter_day_sensor,
        c->filter_effi_day_sensor,
        c->control_speed_sensor,
      };
    sensors:
      - name: "Air quality PM2.5"
        unit_of_measurement: "µg/m³"
        device_class: pm25
        state_class: "measurement"
      - name: "Carbon dioxide"
        unit_of_measurement: "ppm"
        device_class: carbon_dioxide
        state_class: "measurement"
      - name: "Temperature"
        unit_of_measurement: "°C"
        device_class: temperature
        accuracy_decimals: 1
        state_class: "measurement"
      - name: "Filter intermediate Level"
        entity_category: diagnostic
        unit_of_measurement: "%"
        icon: mdi:air-filter
      - name: "Filter efficient Level"
        entity_category: diagnostic
        unit_of_measurement: "%"
        icon: mdi:air-filter
      - name: "Filter intermediate Remaining"
        entity_category: diagnostic
        unit_of_measurement: "d"
        icon: mdi:air-filter
      - name: "Filter efficient Remaining"
        entity_category: diagnostic
        unit_of_measurement: "d"
        icon: mdi:air-filter
      - name: "Control speed"
        entity_category: diagnostic
        unit_of_measurement: "m3/h"
        icon: mdi:speedometer


